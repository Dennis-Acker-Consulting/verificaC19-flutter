import 'package:flutter_test/flutter_test.dart';
import 'package:verificac19/src/utils/dcc_utils.dart';
import 'package:verificac19/verificac19.dart';

import 'fixtures/fixture_reader.dart';

void main() {
  test('Should read valid certificate from raw', () async {
    DCC dcc = await DccUtils.getDCCFromRawData(
        r"HC1:6BF+70790T9WJWG.FKY*4GO0.O1CV2 O5 N2FBBRW1*70HS8WY04AC*WIFN0AHCD8KD97TK0F90KECTHGWJC0FDC:5AIA%G7X+AQB9746HS80:54IBQF60R6$A80X6S1BTYACG6M+9XG8KIAWNA91AY%67092L4WJCT3EHS8XJC$+DXJCCWENF6OF63W5NW6WF6%JC QE/IAYJC5LEW34U3ET7DXC9 QE-ED8%E.JCBECB1A-:8$96646AL60A60S6Q$D.UDRYA 96NF6L/5QW6307KQEPD09WEQDD+Q6TW6FA7C466KCN9E%961A6DL6FA7D46JPCT3E5JDLA7$Q6E464W5TG6..DX%DZJC6/DTZ9 QE5$CB$DA/D JC1/D3Z8WED1ECW.CCWE.Y92OAGY8MY9L+9MPCG/D5 C5IA5N9$PC5$CUZCY$5Y$527B+A4KZNQG5TKOWWD9FL%I8U$F7O2IBM85CWOC%LEZU4R/BXHDAHN 11$CA5MRI:AONFN7091K9FKIGIY%VWSSSU9%01FO2*FTPQ3C3F");
    assert(dcc.payload['nam']['fn'] == 'Mustermann');
  });

  test('Should throw exception reading bad data', () async {
    String rawData =
        r
    expect(
      () async => await DccUtils.getDCCFromRawData(rawData),
      throwsA(isA<ParseException>()),
    );
  });

  test('Should read kid from raw certificate', () async {
    DCC dcc = await DccUtils.getDCCFromRawData(
        r"HC1:6BF+70790T9WJWG.FKY*4GO0.O1CV2 O5 N2FBBRW1*70HS8WY04AC*WIFN0AHCD8KD97TK0F90KECTHGWJC0FDC:5AIA%G7X+AQB9746HS80:54IBQF60R6$A80X6S1BTYACG6M+9XG8KIAWNA91AY%67092L4WJCT3EHS8XJC$+DXJCCWENF6OF63W5NW6WF6%JC QE/IAYJC5LEW34U3ET7DXC9 QE-ED8%E.JCBECB1A-:8$96646AL60A60S6Q$D.UDRYA 96NF6L/5QW6307KQEPD09WEQDD+Q6TW6FA7C466KCN9E%961A6DL6FA7D46JPCT3E5JDLA7$Q6E464W5TG6..DX%DZJC6/DTZ9 QE5$CB$DA/D JC1/D3Z8WED1ECW.CCWE.Y92OAGY8MY9L+9MPCG/D5 C5IA5N9$PC5$CUZCY$5Y$527B+A4KZNQG5TKOWWD9FL%I8U$F7O2IBM85CWOC%LEZU4R/BXHDAHN 11$CA5MRI:AONFN7091K9FKIGIY%VWSSSU9%01FO2*FTPQ3C3F");

    assert(dcc.kid == 'DEsVUSvpFAE=');
  });

  test('Should verify signature', () async {
    DCC dcc = await DccUtils.getDCCFromRawData(fixture('signed_cert.txt'));
    String pem = fixture('signing_certificate.crt');

    final result = await DccUtils.checkSignatureWithCertificate(pem, dcc);

    assert(dcc.kid == '2Rk3X8HntrI=');
    assert(result == true);
  });

  test('Should not verify signature', () async {
    DCC dcc = await DccUtils.getDCCFromRawData(fixture('signed_cert.txt'));
    String pem = fixture('wrong_signing_certificate.crt');

    final result = await DccUtils.checkSignatureWithCertificate(pem, dcc);

    assert(dcc.kid == '2Rk3X8HntrI=');
    assert(result == false);
  });
}
